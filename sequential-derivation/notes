Notes 
-----

My strategy will be to read documents in this order:
 * Sequential derivation scheme pdf - https://drive.google.com/file/d/15hjAoZ-IPeex71SPVsuHKk6MCOhE5XsQ/view
 * bip32 proposal - https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
 * bip44 proposal - https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
 * bip39 proposal - https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
    - mnemonic scheme is already familiar to me
 * ED25519 and ED25519-BIP32 schemes
  

After reading "Sequential derivation scheme" for the first time I would expect to have a vague understanding of some primitives. Will do a second read reading bip32, bip44 and other proposals as they will probably shed a light on Sequential derivation scheme.

# Reading "Sequential derivation scheme" pdf

If this is pdf produced by us, there are some typos. I can create a PR if I knew the repo:

## Abstract

TYPO:
> Describe the sequential scheme wallet derivation scheme
probably should be "Describe the sequential wallet derivation scheme"

What means that scheme is sequential?
What is exactly wallet derivation? Is that private/public key derivation from some master key? Usually master key which enables derivation is a private master key - but to my understanding hardware/external wallets require different use case: to have a master public key which can derive other private/public key pairs and to use master private key only to sign created transactions (this key should be held on a external/hardware device).

Document says it additionally covers recovery (I guess we mean some catastrophic recovery option - like losing a key. In such case user has to have an option to recover a key) and details for multisig accounts. My understanding for multisig accounts is that its a scheme where multiple signatures are needed for transaction to be accepted by a ledger.

## Derivation function

For derivation we are using ED25519-BIP32 scheme, which is bip32 with ED25519 crypto signing scheme.

TYPO:
> (ED21559), which is defined in ED25519-BIP32.
s/ED21559/ED25519

We are given 3 functions for deriving keys:

```
toPub :: XPrv n -> XPub n
```
which derives public key from a private one. Its more extraction in this case as private key probably contains public key within.

n is a Natural number representing depth of the derivation. I would guess this is a deterministic way of generating more keys. How many entropy do we have and how many keys will be able to safely derive before depleting the entropy? (this is probably defined in ither ED25519 or bip32)


