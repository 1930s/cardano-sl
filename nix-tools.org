* Using the ~nix-tools~

after building ~stack-to-nix~ running the following command

#+BEGIN_SRC bash
$(find /path/to/nix-tools/ -type f -name "stack-to-nix") stack.yaml \
  > stack-pkgs.nix
#+END_SRC

will generate a nix expression via ~cabal-to-nix~ in ~.stack.nix~ for
each package referenced in the ~stack.yaml~ file and produce the
~stack-pkgs.nix~ file which references all packages.

To turn the ~stack-pkgs.nix~ file into an overlay, we'll construct the
following nix expression:

#+BEGIN_SRC nix
{ pkgs ? import <nixpkgs> {}
, localLib
}:
let
  # all packages from hackage as nix expressions
  hackage = import localLib.fetchHackage;
  # a different haskell infrastructure
  haskell = import localLib.fetchHaskell hackage;

  # the set of all stackage snapshots
  stackage = import localLib.fetchStackage { inherit pkgs hackage haskell; };

  # our packages
  stack-pkgs = import ./stack-pkgs.nix;

  # pick the repsective stackage version here
  # and augment them with out packages
  stackPackages = stackage.lts-11_13 {
    extraDeps = hsPkgs (stack-pkgs.extraDeps hsPkgs
                     // stack-pkgs.packages  hsPkgs); }
in stackPackages
#+END_SRC
